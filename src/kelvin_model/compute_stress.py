# coding: utf-8

import ctypes
import concurrent.futures
import numpy as np
import itertools


def worker(lib: ctypes.CDLL,
           i: int,
           exx: float,
           eyy: float,
           exy: float,
           lamh: float,
           lam11: float,
           lam21: float,
           lam31: float,
           lam41: float,
           lam51: float,
           lam12: float,
           lam22: float,
           lam32: float,
           lam42: float,
           lam52: float,
           lam13: float,
           lam23: float,
           lam33: float,
           lam43: float,
           lam53: float,
           lam14: float,
           lam24: float,
           lam34: float,
           lam44: float,
           lam54: float,
           lam15: float,
           lam25: float,
           lam35: float,
           lam45: float,
           lam55: float,
           val1: float,
           val2: float,
           val3: float,
           val4: float,
           val5: float,
           theta_1: float,
           theta_2: float,
           theta_3: float,
           sigma_1: float,
           sigma_2: float,
           sigma_3: float,
           density: float,
           sxx: ctypes.c_double,
           syy: ctypes.c_double,
           sxy: ctypes.c_double) -> tuple[int, float, float, float]:
    """"""

    lib.calc_stress(*map(ctypes.c_double, (exx,
                                           eyy,
                                           exy,
                                           lamh,
                                           lam11,
                                           lam21,
                                           lam31,
                                           lam41,
                                           lam51,
                                           lam12,
                                           lam22,
                                           lam32,
                                           lam42,
                                           lam52,
                                           lam13,
                                           lam23,
                                           lam33,
                                           lam43,
                                           lam53,
                                           lam14,
                                           lam24,
                                           lam34,
                                           lam44,
                                           lam54,
                                           lam15,
                                           lam25,
                                           lam35,
                                           lam45,
                                           lam55,
                                           val1,
                                           val2,
                                           val3,
                                           val4,
                                           val5,
                                           theta_1,
                                           theta_2,
                                           theta_3,
                                           sigma_1,
                                           sigma_2,
                                           sigma_3,
                                           density)),
                    *map(ctypes.byref, (sxx, syy, sxy)))
    return i, sxx.value, syy.value, sxy.value


def wrapper(args):
    """"""

    return worker(*args)


def compute_stress(lib: ctypes.CDLL,
                   exx: np.ndarray,
                   eyy: np.ndarray,
                   exy: np.ndarray,
                   lambda_h: float,
                   lambda_11: float,
                   lambda_21: float,
                   lambda_51: float,
                   lambda_12: float,
                   lambda_22: float,
                   lambda_52: float,
                   lambda_13: float,
                   lambda_23: float,
                   lambda_53: float,
                   lambda_14: float,
                   lambda_24: float,
                   lambda_54: float,
                   lambda_15: float,
                   lambda_25: float,
                   lambda_55: float,
                   val1: float,
                   val2: float,
                   val3: float,
                   val4: float,
                   val5: float,
                   theta_1: np.ndarray,
                   theta_2: np.ndarray,
                   theta_3: np.ndarray,
                   sigma_1: np.ndarray,
                   sigma_2: np.ndarray,
                   sigma_3: np.ndarray,
                   density: np.ndarray
                   ) -> tuple[np.ndarray, np.ndarray, np.ndarray]:
    """"""

    nb_tot = exx.shape[0] * exx.shape[1]
    mem_buf = ((ctypes.c_double(),) * nb_tot,
               (ctypes.c_double(),) * nb_tot,
               (ctypes.c_double(),) * nb_tot)
    args = zip(itertools.repeat(lib, nb_tot),
               range(nb_tot),
               exx.flatten(),
               eyy.flatten(),
               exy.flatten(),
               itertools.repeat(lambda_h, nb_tot),
               itertools.repeat(lambda_11, nb_tot),
               itertools.repeat(lambda_21, nb_tot),
               itertools.repeat(1.0, nb_tot),
               itertools.repeat(1.0, nb_tot),
               itertools.repeat(lambda_51, nb_tot),
               itertools.repeat(lambda_12, nb_tot),
               itertools.repeat(lambda_22, nb_tot),
               itertools.repeat(1.0, nb_tot),
               itertools.repeat(1.0, nb_tot),
               itertools.repeat(lambda_52, nb_tot),
               itertools.repeat(lambda_13, nb_tot),
               itertools.repeat(lambda_23, nb_tot),
               itertools.repeat(1.0, nb_tot),
               itertools.repeat(1.0, nb_tot),
               itertools.repeat(lambda_53, nb_tot),
               itertools.repeat(lambda_14, nb_tot),
               itertools.repeat(lambda_24, nb_tot),
               itertools.repeat(1.0, nb_tot),
               itertools.repeat(1.0, nb_tot),
               itertools.repeat(lambda_54, nb_tot),
               itertools.repeat(lambda_15, nb_tot),
               itertools.repeat(lambda_25, nb_tot),
               itertools.repeat(1.0, nb_tot),
               itertools.repeat(1.0, nb_tot),
               itertools.repeat(lambda_55, nb_tot),
               itertools.repeat(val1, nb_tot),
               itertools.repeat(val2, nb_tot),
               itertools.repeat(val3, nb_tot),
               itertools.repeat(val4, nb_tot),
               itertools.repeat(val5, nb_tot),
               theta_1.flatten(),
               np.nan_to_num(theta_2).flatten(),
               np.nan_to_num(theta_3).flatten(),
               sigma_1.flatten(),
               np.nan_to_num(sigma_2).flatten(),
               np.nan_to_num(sigma_3).flatten(),
               density.flatten(),
               *mem_buf)

    stress = np.empty((*exx.shape, 3), dtype=np.float64)

    with concurrent.futures.ProcessPoolExecutor() as executor:
        for i, sxx, syy, sxy in executor.map(wrapper, args, chunksize=300):
            stress[np.unravel_index(i, exx.shape)] = (sxx, syy, sxy)

    return stress[:, :, 0], stress[:, :, 1], stress[:, :, 2]
